y = myData$y        # The y values are in the column named y.
Ntotal = length(y)  # Compute the total number of flips.
dataList = list(    # Put the information into a list.
y = y ,
Ntotal = Ntotal
)
# Define the model:
modelString = "
model {
for ( i in 1:Ntotal ) {
y[i] ~ dbern( theta )
}
theta ~ dbeta( 1 , 1 )
}
" # close quote for modelString
writeLines( modelString , con="TEMPmodel.txt" )
# Initialize the chains based on MLE of data.
# Option: Use single initial value for all chains:
#  thetaInit = sum(y)/length(y)
#  initsList = list( theta=thetaInit )
# Option: Use function that generates random values for each chain:
initsList = function() {
resampledY = sample( y , replace=TRUE )
thetaInit = sum(resampledY)/length(resampledY)
thetaInit = 0.001+0.998*thetaInit # keep away from 0,1
return( list( theta=thetaInit ) )
}
# Run the chains:
jagsModel = jags.model( file="TEMPmodel.txt" , data=dataList , inits=initsList ,
n.chains=3 , n.adapt=500 )
update( jagsModel , n.iter=500 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") ,
n.iter=3334 )
save( codaSamples , file=paste0(fileNameRoot,"Mcmc.Rdata") )
# Examine the chains:
# Convergence diagnostics:
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ThetaDiag") , type="eps" )
# Posterior descriptives:
openGraph(height=3,width=4)
par( mar=c(3.5,0.5,2.5,0.5) , mgp=c(2.25,0.7,0) )
plotPost( codaSamples[,"theta"] , main="theta" , xlab=bquote(theta) )
saveGraph( file=paste0(fileNameRoot,"ThetaPost") , type="eps" )
# Re-plot with different annotations:
plotPost( codaSamples[,"theta"] , main="theta" , xlab=bquote(theta) ,
cenTend="median" , compVal=0.5 , ROPE=c(0.45,0.55) , credMass=0.90 )
saveGraph( file=paste0(fileNameRoot,"ThetaPost2") , type="eps" )
data("AirPassengers")
class("AirPassengers")
start("AirPassengers")
end("Airpassengers")
start(AirPassengers)
end(AirPassengers)
class(AirPassengers)
summary(AirPassengers)
frequency(AirPassengers)
plot(AirPassengers)
abline(reg = lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plt(aggregate(AirPassengers, FUN = mean()))
plt(aggregate(AirPassengers, FUN = mean)
)
plt(aggregate(AirPassengers, FUN = mean))
plot(aggregate(AirPassengers, FUN = mean))
boxplot(AirPassengers~cycle(AirPassengers))
#Detrending and Dick Fueller test
install.packages("tseries")
data("AirPassengers")
boxplot(AirPassengers~cycle(AirPassengers))
require(tseries)
adf.test(log(AirPassengers), alternative = "stationary", k = 0)
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred = predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
plot(JJ)
require(stats); require(graphics)
JJ <- log10(JohnsonJohnson)
plot(JJ)
setwd("~/Desktop/Time_Series_Analysis")
carSpeeds <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
DelhiTemp <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
DelhiTemp <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
plot(DelhiTemp$Temperature)
DelhiTemp$Date <- as.Date(with(DelhiTemp, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
plot(DelhiTemp$Temperature)
plot(DelhiTemp$Temperature~DelhiTemp$Date)
DelhiTemp$Temperature[DelhiTemp$Temperature < -50] <- NA
plot(DelhiTemp$Temperature~DelhiTemp$Date)
MonthDelhiTemp %>% group_by(month=floor_date(DelhiTemp$Date, "1 month")) %>% summarize(Temperature=mean(DelhiTemp$Temperature))
DelhiMonthlyTemp %>% group_by(DelhiTemp$Month) %>% summarize(meanTemp = mean(DelhiTemp$Temperature))
library(dplyr)
DelhiMonthlyTemp %>% group_by(DelhiTemp$Month) %>% summarize(meanTemp = mean(DelhiTemp$Temperature))
DelhiTemp.head()
head(DelhiTemp)
DelhiMonthlyTemp %>% group_by(DelhiTemp$Month) %>% summarize(meanTemp = mean(DelhiTemp$Temperature))
library(lubridate)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month) %>% summarize(meanTemp = mean(Temperature))
head(DelhiMonthlyTemp)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month) %>% summarize(meanTemp = mean(DelhiTemp$Temperature))
head(DelhiMonthlyTemp)
na.locf(na.locf(DelhiTemp$Temperature), fromLast = TRUE)
library(zoo)
na.locf(na.locf(DelhiTemp$Temperature), fromLast = TRUE)
head(DelhiTemp)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month) %>% summarize(meanTemp = mean(DelhiTemp$Temperature))
head(DelhiMonthlyTemp)
DelhiTemp %>% fill(Temperature)
library(tidyr)
DelhiTemp %>% fill(Temperature)
head(DelhiTemp)
DelhiTemp$Temperature[DelhiTemp$Temperature=NA]
DelhiTemp$Temperature[DelhiTemp$Temperature==NA]
head(DelhiTemp)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month) %>% summarize(meanTemp = mean(DelhiTemp$Temperature))
head(DelhiMonthlyTemp)
DelhiTemp <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
plot(DelhiTemp$Temperature)
DelhiTemp$Date <- as.Date(with(DelhiTemp, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
plot(DelhiTemp$Temperature~DelhiTemp$Date)
DelhiTemp <- ts(DelhiTemp)
plot(DelhiTemp$Temperature)
plot(DelhiTemp)
DelhiTemp$Temperature[DelhiTemp$Temperature < -50] <- NA
DelhiTemp <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
plot(DelhiTemp$Temperature)
DelhiTemp$Date <- as.Date(with(DelhiTemp, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
plot(DelhiTemp$Temperature~DelhiTemp$Date)
DelhiTemp$Temperature[DelhiTemp$Temperature < -50] <- NA
DelhiTemp %>% fill(Temperature)
plot(DelhiTemp$Temperature~DelhiTemp$Date)
DelhiTempTS <- ts(DelhiTemp)
plot(DelhiTempTS)
DelhiMonthlyTempTS <- DelhiTempTS %>% group_by(Month) %>% summarize(meanTemp = mean(DelhiTemp$Temperature))
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month) %>% summarize(meanTemp = mean(Temperature))
head(DelhiMonthlyTemp)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp)
DelhiTemp %>% group_by(Month) %>% summarize(Temperature = mean(Temperature))
plot(DelhiTemp$Temperature~DelhiTemp$Date)
which (is.na(DelhiTemp$Temperature))
DelhiTemp %>% fillna(Temperature)
DelhiTemp %>% fill.na(Temperature)
DelhiTemp %>% replace_na(Temperature)
DelhiTemp %>% replace_na(DelhiTemp$Temperature)
DelhiTemp$Temperature <- na.locf(DelhiTemp$Temperature, fromLast = TRUE)
DelhiTemp %>% group_by(Month) %>% summarize(Temperature = mean(Temperature))
which (is.na(DelhiTemp$Temperature))
DelhiTemp %>% group_by(Month) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp)
DelhiTemp %>% group_by(Month) %>% summarize(Temperature = mean(Temperature))
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp)
DelhiTemp <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
plot(DelhiTemp$Temperature)
DelhiTemp$Date <- as.Date(with(DelhiTemp, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
plot(DelhiTemp$Temperature~DelhiTemp$Date)
DelhiTemp$Temperature[DelhiTemp$Temperature < -50] <- NA
which (is.na(DelhiTemp$Temperature))
DelhiTemp$Temperature <- na.locf(DelhiTemp$Temperature, fromLast = TRUE)
which (is.na(DelhiTemp$Temperature))
plot(DelhiTemp$Temperature~DelhiTemp$Date)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Month,Year) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp)
DelhiMonthlyTemp$Date <- as.yearmon(paste(DelhiMonthlyTemp$Year, DelhiMonthlyTemp$Month), "%Y %m")
plot(DelhiMonthlyTemp$Temperature~DelhiMonthlyTemp$Date)
plot(DelhiMonthlyTemp$Temperature~DelhiMonthlyTemp$Date,type="l")
DelhiMonthlyTempTS <- ts(DelhiMonthlyTemp)
plot(DelhiMonthlyTempTS)
plot(DelhiMonthlyTemp)
plot(DelhiMonthlyTemp$Temperature)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Year,Month) %>% summarize(Temperature = mean(Temperature))
plot(DelhiMonthlyTemp$Temperature)
DelhiMonthlyTemp$Date <- as.yearmon(paste(DelhiMonthlyTemp$Year, DelhiMonthlyTemp$Month), "%Y %m")
plot(DelhiMonthlyTemp$Temperature,DelhiMonthlyTemp$Date)
plot(DelhiMonthlyTemp$Temperature~DelhiMonthlyTemp$Date)
plot(DelhiMonthlyTemp$Temperature~DelhiMonthlyTemp$Date,type="l")
DelhiMonthlyTempTS <- ts(DelhiMonthlyTemp)
plot(DelhiMonthlyTempTS)
plot(DelhiMonthlyTempTS~Date)
acf(DelhiMonthlyTemp$Temperature,main='ACF')
pacf(DelhiMonthlyTemp$Temperature,main='ACF')
plot(diff(diff(DelhiMonthlyTemp$Temperature),12),type="l")
par(mfrow=c(2,1))
acf(DelhiMonthlyTemp$Temperature,main='ACF')
pacf(DelhiMonthlyTemp$Temperature,main='ACF')
par(mfrow=c(2,1))
acf(DelhiMonthlyTemp$Temperature,main='ACF')
pacf(DelhiMonthlyTemp$Temperature,main='PACF')
par(mfrow=c(2,1))
acf(diff(diff(DelhiMonthlyTemp$Temperature),12),main='differnced data ACF',50)
pacf(diff(diff(DelhiMonthlyTemp$Temperature),12),main='differnced data PACF',50)
plot(diff(DelhiMonthlyTemp$Temperature),type="l")
plot(diff(DelhiMonthlyTemp$Temperature,12),type="l")
plot(diff(diff(DelhiMonthlyTemp$Temperature),12),type="l")
par(mfrow=c(1,1))
plot(diff(diff(DelhiMonthlyTemp$Temperature),12),type="l")
par(mfrow=c(2,1))
acf(diff(diff(DelhiMonthlyTemp$Temperature),12),main='differnced data ACF',50)
pacf(diff(diff(DelhiMonthlyTemp$Temperature),12),main='differnced data PACF',50)
d=1; DD=1; per=12
for(p in 1:2){
for(q in 1:2){
for(i in 1:6){
for(j in 1:3){
if(p+d+q+i+DD+j<=10){
model<-arima(x=my.data, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
d=1; DD=1; per=12
for(p in 1:2){
for(q in 1:2){
for(i in 1:6){
for(j in 1:3){
if(p+d+q+i+DD+j<=10){
model<-arima(x=DelhiMonthlyTemp$Temperature, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
sarima(DelhiMonthlyTemp$Temperature,1,1,1,0,1,1,12)
library(sarima)
cran
library(cran)
library(astsa)
sarima(DelhiMonthlyTemp$Temperature,1,1,1,0,1,1,12)
model<-arima(x=DelhiMonthlyTemp$Temperature, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
plot(forecast(model))
library((forecast))
library(forecast)
plot(forecast(model))
par(mfrow=c(1,1))
plot(forecast(model))
---
title: "Delhi_temp_timeseries_data_sarima_fitting"
author: "Kiran Lakhchaura"
date: "3/2/2021"
output: html_document
install.packages("viridis")
library(viridis)
image(volcano, col = viridis(200))
image(volcano, col = viridis(200, option = "A"))
library(viridis)
image(volcano, col = viridis(200))
library(zoo)
library(tidyr)
library(dplyr)
library(lubridate)
DelhiTemp <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
Data <- DelhiTemp$Temperature
plot(Data)```
Data <- DelhiTemp$Temperature
plot(Data)
DelhiTemp$Date <- as.Date(with(DelhiTemp, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
Data <- DelhiTemp$Temperature
plot(Data)
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
DelhiTemp$Temperature[DelhiTemp$Temperature < -50] <- NA
which(is.na(DelhiTemp$Temperature))
DelhiTemp$Temperature <- na.locf(DelhiTemp$Temperature, fromLast = TRUE)
which(is.na(DelhiTemp$Temperature))
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Year,Month) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Year,Month) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp);
DelhiMonthlyTemp$Date <- as.yearmon(paste(DelhiMonthlyTemp$Year, DelhiMonthlyTemp$Month), "%Y %m")
Temp <- DelhiMonthlyTemp$Temperature
Date <- DelhiMonthlyTemp$Date
plot(Temp~Date,type="l")
par(mfrow=c(2,1))
acf(DelhiMonthlyTemp$Temperature,main='ACF')
pacf(DelhiMonthlyTemp$Temperature,main='PACF')
library(zoo)
library(tidyr)
library(dplyr)
library(lubridate)
DelhiTemp <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
Data <- DelhiTemp$Temperature
plot(Data)
DelhiTemp$Date <- as.Date(with(DelhiTemp, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
DelhiTemp$Temperature[DelhiTemp$Temperature < -50] <- NA
which(is.na(DelhiTemp$Temperature))
DelhiTemp$Temperature <- na.locf(DelhiTemp$Temperature, fromLast = TRUE)
which(is.na(DelhiTemp$Temperature))
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Year,Month) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp);
DelhiMonthlyTemp$Date <- as.yearmon(paste(DelhiMonthlyTemp$Year, DelhiMonthlyTemp$Month), "%Y %m")
Temp <- DelhiMonthlyTemp$Temperature
Date <- DelhiMonthlyTemp$Date
plot(Temp~Date,type="l")
par(mfrow=c(2,1))
acf(DelhiMonthlyTemp$Temperature,main='ACF')
pacf(DelhiMonthlyTemp$Temperature,main='PACF')
par(mfrow=c(2,1))
acf(DelhiMonthlyTemp$Temperature,main='ACF')
pacf(DelhiMonthlyTemp$Temperature,main='PACF');
Temp <- DelhiMonthlyTemp$Temperature
plot(diff(diff(Temp),12),type="l")
par(mfrow=c(2,1))
acf(diff(diff(DelhiMonthlyTemp$Temperature),12),main='differnced data ACF',50)
pacf(diff(diff(DelhiMonthlyTemp$Temperature),12),main='differnced data PACF',50);
d=1; DD=1; per=12
for(p in 1:2){
for(q in 1:2){
for(i in 1:6){
for(j in 1:3){
if(p+d+q+i+DD+j<=10){
model<-arima(x=DelhiMonthlyTemp$Temperature, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
library(astsa)
library(forecast)
sarima(DelhiMonthlyTemp$Temperature,1,1,1,0,1,1,12)
model<-arima(x=DelhiMonthlyTemp$Temperature, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
par(mfrow=c(1,1))
plot(forecast(model));
library(zoo)
library(tidyr)
library(dplyr)
library(lubridate)
library(astsa)
library(forecast)
par(mfrow=c(2,1))
acf(diff(diff(Temp),12),main='differnced data ACF',50)
pacf(diff(diff(Temp),12),main='differnced data PACF',50);
Temp <- DelhiMonthlyTemp$Temperature
par(mfrow=c(2,1))
acf(Temp,main='ACF')
pacf(Temp,main='PACF');
plot(diff(diff(Temp),12),type="l")
par(mfrow=c(2,1))
acf(diff(diff(Temp),12),main='differnced data ACF',50)
pacf(diff(diff(Temp),12),main='differnced data PACF',50);
library(zoo)
library(tidyr)
library(dplyr)
library(lubridate)
library(astsa)
library(forecast)
DelhiTemp <- read.csv(file = 'Data/Delhi_temperature_1995_2020.csv')
Data <- DelhiTemp$Temperature
plot(Data)
DelhiTemp$Date <- as.Date(with(DelhiTemp, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
DelhiTemp$Temperature[DelhiTemp$Temperature < -50] <- NA
which(is.na(DelhiTemp$Temperature))
DelhiTemp$Temperature <- na.locf(DelhiTemp$Temperature, fromLast = TRUE)
which(is.na(DelhiTemp$Temperature))
Temp <- DelhiTemp$Temperature
Date <- DelhiTemp$Date
plot(Temp~Date)
DelhiMonthlyTemp <- DelhiTemp %>% group_by(Year,Month) %>% summarize(Temperature = mean(Temperature))
head(DelhiMonthlyTemp);
DelhiMonthlyTemp$Date <- as.yearmon(paste(DelhiMonthlyTemp$Year, DelhiMonthlyTemp$Month), "%Y %m")
Temp <- DelhiMonthlyTemp$Temperature
Date <- DelhiMonthlyTemp$Date
plot(Temp~Date,type="l")
Temp <- DelhiMonthlyTemp$Temperature
par(mfrow=c(2,1))
acf(Temp,main='ACF')
pacf(Temp,main='PACF');
plot(diff(diff(Temp),12),type="l")
par(mfrow=c(2,1))
acf(diff(diff(Temp),12),main='differnced data ACF',50)
pacf(diff(diff(Temp),12),main='differnced data PACF',50);
d=1; DD=1; per=12
for(p in 1:2){
for(q in 1:2){
for(i in 1:6){
for(j in 1:3){
if(p+d+q+i+DD+j<=10){
model<-arima(x=Temp, order = c((p-1),d,(q-1)), seasonal = list(order=c((i-1),DD,(j-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals^2)
cat(p-1,d,q-1,i-1,DD,j-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
sarima(Temp,1,1,1,0,1,1,12)
model<-arima(x=Temp, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
par(mfrow=c(1,1))
plot(forecast(model));
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = FALSE, seasonal = TRUE, ic = c("aicc", "aic", "bic"))
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = FALSE, seasonal = TRUE, period=12, ic = c("aicc", "aic", "bic"))
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = FALSE, seasonal = TRUE, m=12, ic = c("aicc", "aic", "bic"))
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = FALSE, seasonal = TRUE, ic = c("aic", "bic"))
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = FALSE, seasonal = TRUE, ic = ic("aic", "bic"))
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = FALSE, seasonal = TRUE, ic = c("aic", "bic"))
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = FALSE, seasonal = TRUE, ic="aic")
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = True, seasonal = TRUE, ic="aic")
auto.arima(Temp, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = TRUE, seasonal = TRUE, ic="aic")
y <- msts(Temp, seasonal.periods=c(12))
auto.arima(y, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 1, start.Q = 1, stationary = FALSE, seasonal = TRUE, ic="aic")
y <- msts(Temp, seasonal.periods=c(12))
auto.arima(y, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 6,  max.Q = 5,  max.order = 5,  max.d = 2,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 0, start.Q = 1, stationary = FALSE, seasonal = TRUE, ic="aic")
model<-arima(x=Temp, order = c(1,1,0), seasonal = list(order=c(1,1,0), period=per))
par(mfrow=c(1,1))
plot(forecast(model));
model<-arima(x=Temp, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
par(mfrow=c(1,1))
plot(forecast(model));
model<-arima(x=Temp, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
par(mfrow=c(1,1))
plot(forecast(model,1));
model<-arima(x=Temp, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
par(mfrow=c(1,1))
plot(forecast(model,12));
y <- msts(Temp, seasonal.periods=c(12))
auto.arima(y, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 5,  max.Q = 5,  max.d = 1,  max.D = 1,  start.p = 0,  start.q = 0,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic")
y <- msts(Temp, seasonal.periods=c(12))
auto.arima(y, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 5,  max.Q = 5,  max.d = 1,  max.D = 1,  start.p = 0,  start.q = 0,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE)
seq(as.Date("2020/1/1"), as.Date("2021/1/1"), "months")
seq(as.yearmon(paste(2020,1)), as.yearmon(paste(2021,1)), "months")
seq(as.yearmon(paste(2020,1),"%Y%m"), as.yearmon(paste(2021,1),"%Y%m), "months")
seq(as.yearmon(2020,1), as.yearmon(2021,1), "months")
as.yearmon(2020,01)
seq(as.yearmon(2020,01), as.yearmon(2021,01), "months")
DelhiMonthlyTemp$Date
seq(as.Date("2020/1/1"), as.Date("2021/1/1"), "months")
model<-arima(x=Temp, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
par(mfrow=c(1,1))
dates = seq(as.Date("2020/1/1"), as.Date("2021/1/1"), "months")
plot(forecast(model,12)~dates); # forecasting for the 12 months after the end of the dataset
y <- msts(Temp, seasonal.periods=c(12))
auto.arima(y, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 5,  max.Q = 5,  max.d = 1,  max.D = 1,  start.p = 0,  start.q = 0,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
y <- msts(Temp, seasonal.periods=c(12))
auto.arima(y, d = 1, D = 1,  max.p = 3,  max.q = 3,  max.P = 3,  max.Q = 3,  max.d = 1,  max.D = 1,  start.p = 0,  start.q = 0,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
y <- msts(Temp, seasonal.periods=c(12))
auto.arima(y, d = 1, D = 1,  max.p = 1,  max.q = 1,  max.P = 1,  max.Q = 1,  max.d = 1,  max.D = 1,  start.p = 0,  start.q = 0,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
y <- msts(Temp, seasonal.periods=c(12))
auto.arima(y, d = 1, D = 1,  max.p = 1,  max.q = 1,  max.P = 1,  max.Q = 1,  max.d = 1,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
y <- msts(Temp, seasonal.periods=c(12))
auto.arim( y, d = NA, D = NA,  max.p = 1,  max.q = 1,  max.P = 1,  max.Q = 1,  max.d = 1,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
y <- msts(Temp, seasonal.periods=c(12))
auto.arima( y, d = NA, D = NA,  max.p = 1,  max.q = 1,  max.P = 1,  max.Q = 1,  max.d = 1,  max.D = 1,  start.p = 1,  start.q = 1,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
y <- msts(Temp, seasonal.periods=c(12))
auto.arima( y, d = 1, D = 1,  max.p = 1,  max.q = 1,  max.P = 1,  max.Q = 1,  start.p = 1,  start.q = 1,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
y <- msts(Temp, seasonal.periods=c(12))
auto.arima( y, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 5,  max.Q = 5,  start.p = 1,  start.q = 1,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
y <- msts(Temp, seasonal.periods=c(12))
auto.arima( y, d = 1, D = 1,  max.p = 5,  max.q = 5,  max.P = 5,  max.Q = 5, max.order = 10,  start.p = 1,  start.q = 1,  start.P = 0, start.Q = 0, stationary = FALSE, seasonal = TRUE, ic="aic", stepwise = TRUE, approximation = FALSE)
adf.test(Temp)
library(tseries)
adf.test(Temp)
library(tseries)
adf.test(diff(Temp,12))
library(tseries)
adf.test(diff(Temp))
adf.test(diff(diff(Temp,12))
adf.test(diff(diff(Temp,12)))
plot(diff(diff(Temp),12),type="l")
adf.test(diff(diff(Temp,12)))
diff_data <- diff(diff(Temp),12),
diff_data <- diff(diff(Temp),12)
adf.test(diff_data)
#diff_data <- diff(diff(Temp),12)
#adf.test(diff_data)
diff_data <- diff(diff(Temp),12)
adf.test(diff_data)
model<-arima(x=Temp, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
par(mfrow=c(1,1))
dates = seq(as.Date("2020/1/1"), as.Date("2021/1/1"), "months")
plot(forecast(model,12)~dates); # forecasting for the 12 months after the end of the dataset
model<-arima(x=Temp, order = c(1,1,1), seasonal = list(order=c(0,1,1), period=per))
par(mfrow=c(1,1))
plot(forecast(model,12)); # forecasting for the 12 months after the end of the dataset
#diff_data <- diff(diff(Temp),12)
#adf.test(diff_data)
